resources = namespace_resources()

# datree-webhook-server setup
webhook_server = resources.deployments["datree-webhook-server"]
webhook_server.spec.template.spec.containers[0].command = ["sh"]
webhook_server.spec.template.spec.containers[0].args = ["-c", "while [ ! -f /out/webhook-datree ]; do echo 'waiting for binary' && sleep 1; done; /out/webhook-datree"]

webhook_go_build_command = "go build -v -o /out/webhook-datree.tmp -gcflags='all=-N -l' main.go && mv /out/webhook-datree.tmp /out/webhook-datree"

webhook_builder = Container(yaml="""
name: builder
image: golang:1.19-alpine
workingDir: /go/src/app
command: ["sh"]
args: ["-c", "apk add build-base && {}"]
""".format(webhook_go_build_command))
webhook_server.spec.template.spec.containers.append(webhook_builder)
webhook_server_out = volume("webhook-server-out")
webhook_server.mount(repo_volume(), "/go/src/app")
webhook_server.mount(repo_volume(), "/go/src/app", container="builder")
webhook_server.mount(webhook_server_out, "/out", no_copy=True)
webhook_server.mount(webhook_server_out, "/out", no_copy=True, container="builder")
webhook_server_build_cache = volume("webhook-server-cache")
webhook_server.mount(webhook_server_build_cache, "/root/.cache/go-build", container="builder")


# disable probes
webhook_server.spec.template.spec.containers[0].liveness_probe = None
webhook_server.spec.template.spec.containers[0].readiness_probe = None

# hot reload
webhook_server.add_raftt_cli(container="builder")
register_hook(
  on=events.OnFileChanged(
    workload=webhook_server,
    container="builder",
    patterns="/go/src/app/**/*.go"),
  do=[
    actions.CMD(
        workload=webhook_server,
        container="builder",
        cmd=["sh", "-c", webhook_go_build_command + " && raftt restart datree-webhook-server"])])


# datree-cluster-scanner-server setup
scanner_repo = clone_repo_branch("https://github.com/datreeio/cluster-scanner", "main")

scanner_server = resources.deployments["datree-cluster-scanner-server"]
scanner_server.spec.template.spec.containers[0].command = ["sh"]
scanner_server.spec.template.spec.containers[0].args = ["-c", "while [ ! -f /out/scanner-datree ]; do echo 'waiting for binary' && sleep 1; done; /out/scanner-datree"]

scanner_go_build_command = "go build -v -o /out/scanner-datree.tmp -gcflags='all=-N -l' main.go && mv /out/scanner-datree.tmp /out/scanner-datree"

scanner_builder = Container(yaml="""
name: builder
image: golang:1.19-alpine
workingDir: /go/src/app
command: ["sh"]
args: ["-c", "apk add build-base && {}"]
""".format(scanner_go_build_command))
scanner_server.spec.template.spec.containers.append(scanner_builder)
scanner_server_out = volume("scanner-server-out")
scanner_server.mount(repo_volume(scanner_repo), "/go/src/app")
scanner_server.mount(repo_volume(scanner_repo), "/go/src/app", container="builder")
scanner_server.mount(scanner_server_out, "/out", no_copy=True)
scanner_server.mount(scanner_server_out, "/out", no_copy=True, container="builder")
scanner_server_build_cache = volume("scanner-server-cache")
scanner_server.mount(scanner_server_build_cache, "/root/.cache/go-build", container="builder")

# disable probes
scanner_server.spec.template.spec.containers[0].liveness_probe = None
scanner_server.spec.template.spec.containers[0].readiness_probe = None

# hot reload
scanner_server.add_raftt_cli(container="builder")
register_hook(
  on=events.OnFileChanged(
    workload=scanner_server,
    container="builder",
    patterns="/go/src/app/**/*.go"),
  do=[
    actions.CMD(
        workload=scanner_server,
        container="builder",
        cmd=["sh", "-c", scanner_go_build_command + " && raftt restart datree-cluster-scanner-server"])])

deploy(resources)
