resources = namespace_resources()
# Here you can specify image building, volume seeding and much more for the
# resources before deploying, checkout https://docs.raftt.io/ for more information

# datree-webhook-server setup

webhook_server = resources.deployments["datree-webhook-server"]
webhook_server.spec.template.spec.containers[0].image="golang:1.19-alpine"
webhook_server.spec.template.spec.containers[0].working_dir = "/go/src/app"
webhook_server.spec.template.spec.containers[0].command = ["go"]
webhook_server.spec.template.spec.containers[0].args = ["run", "/go/src/app"]
webhook_server.mount(repo_volume(), "/go/src/app")

# hot reload
webhook_server.add_raftt_cli()
register_hook(
  on=events.OnFileChanged(
    workload=webhook_server,
    patterns="/go/src/app/**/*.go"),
  do=actions.CMD(
    workload=webhook_server,
    cmd=["raftt", "restart", "datree-webhook-server"]))
    
# datree-cluster-scanner-server setup
secondary_repo = clone_repo_branch("https://github.com/datreeio/cluster-scanner", "raftt_poc")

scanner_server = resources.deployments["datree-cluster-scanner-server"]
scanner_server.spec.template.spec.containers[0].image="golang:1.18-alpine"
scanner_server.spec.template.spec.containers[0].working_dir = "/go/src/app"
scanner_server.spec.template.spec.containers[0].command = ["go"]
scanner_server.spec.template.spec.containers[0].args = ["run", "/go/src/app"]
scanner_server.mount(repo_volume(secondary_repo), "/go/src/app")

# hot reload
scanner_server.add_raftt_cli()
register_hook(
  on=events.OnFileChanged(
    workload=scanner_server,
    patterns="/go/src/app/**/*.go"),
  do=actions.CMD(
    workload=scanner_server,
    cmd=["raftt", "restart", "datree-cluster-scanner-server"]))

# secondary_repo.deploy()

deploy(resources)
