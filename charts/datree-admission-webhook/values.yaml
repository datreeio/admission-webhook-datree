# Default values for datree-admission-webhook.

# The name of the namespace all resources will be created in, if not specified in the release.
namespace: ""
# The number of Datree webhook-server replicas to deploy for the webhook.
replicaCount: 2
# Additional labels to add to all resources.
customLabels: {}
# Additional annotations to add to all resources.
customAnnotations: {}
# Create ClusterRoles, ClusterRoleBindings, and ServiceAccount for datree-webhook-server
rbac:
  serviceAccount:
    # Create the ServiceAccount
    create: true
    # The ServiceAccount name
    name: datree-webhook-server
  clusterRole:
    # Create the ClusterRole
    create: true
    # The ClusterRole name
    name: datree-webhook-server-read
datree:
  # The token used to link the CLI to your dashboard.
  token: <DATREE_TOKEN>
  # The name of the policy to check, e.g: staging. (string, optional)
  policy: ""
  # Display 'How to Fix' link for failed rules in output. (boolean ,optional)
  verbose: ""
  # The format output of the policy check results: yaml, json, xml, simple, JUnit. (string ,optional)
  output: ""
  # Donâ€™t send policy checks metadata to the backend. (boolean ,optional)
  noRecord: ""
  # Whether to enforce the policy check results or not. (boolean ,optional)
  enforce: false
# The Datree webhook-server image to use.
image:
  # Image repository
  repository: datree/admission-webhook
  # Image tag
  tag: 0.1.30
  # Image pull policy
  pullPolicy: Always
# Security context for the containers
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 25000
resources:
  limits:
    memory: 512Mi
  requests:
    cpu: 1000m
    memory: 512Mi
# During install Datree run two hooks: pre-install and pre-delete.
# `datree-label-namespaces-hook-post-install` - Helm hook that run after the chart is installed and label namespaces with admission.datree/validate=skip
# `datree-wait-server-ready-hook-post-install` - Helm hook that run after the chart is awaits for the webhook-server to be ready
hooks:
  # The timeout time the hook will wait for the webhook-server is ready.
  timeoutTime:
  # The image for running kubectl commands
  image:
    repository: public.ecr.aws/m6p7v6h2
    sha: sha256:d3c17f1dc6e665dcc78e8c14a83ae630bc3d65b07ea11c5f1a012c2c6786d039
    pullPolicy: IfNotPresent
