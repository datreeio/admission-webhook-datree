{{- $emptyTokenMessage := "\n\t‚ùå The installation failed since the token that was provided is invalid.\n\tüí° To fix this issue:\n\t\t1. Get your token at: https://app.datree.io/settings/token-management\n\t\t2. Reinstall Datree and set your token using helm:\n\n\t\thelm install -n datree datree-webhook datree-webhook/datree-admission-webhook --create-namespace --set datree.token=<YOUR_TOKEN>\n" -}}
{{- $uuidv4RegexPattern := "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datree-webhook-server
  namespace: {{ template "datree.namespace" . }}
  labels: {{ include "datree.labels" . | nindent 4 }}
    owner: datree
    app: "datree-webhook-server"
  {{- with .Values.customAnnotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: 
      app: "datree-webhook-server"
  template:
    metadata:
      labels: {{ include "datree.labels" . | nindent 8 }}
        app: "datree-webhook-server"
      annotations:
        roolout: {{ randAlphaNum 5 | quote }}
        {{- with .Values.customAnnotations }}
        {{ toYaml . }}
        {{- end}}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      serviceAccountName: {{.Values.rbac.serviceAccount.name}}
      {{- if .Values.imageCredentials.enabled }}
      imagePullSecrets:
      - name: datree-repo-credentials
      {{- end }}
      containers:
        - name: server
          env:
            - name: CLUSTER_NAME
              value: {{.Values.datree.clusterName}}
            - name: DATREE_TOKEN
            {{- if and .Values.datree.existingSecret (ne .Values.datree.existingSecret.name "") (ne .Values.datree.existingSecret.key "") }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.datree.existingSecret.name }}
                  key: {{ .Values.datree.existingSecret.key }}
            {{- else }}
              value: "{{ .Values.datree.token }}"
            {{- end }}
            - name: DATREE_POLICY
              value: {{.Values.datree.policy | default "Starter"}}
            - name: DATREE_VERBOSE
              value: "{{.Values.datree.verbose}}"
            - name: DATREE_OUTPUT
              value: "{{.Values.datree.output}}"
            - name: DATREE_NO_RECORD
              value: "{{.Values.datree.noRecord}}"
            - name: DATREE_ENFORCE
              value: "{{.Values.datree.enforce}}"
            - name: DATREE_CONFIG_FROM_HELM
              value: "{{.Values.datree.configFromHelm | default false }}"
            - name: DATREE_NAMESPACE
              value: {{template "datree.namespace" .}}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- with .Values.securityContext }}
          securityContext: {{ toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
          resources: {{- toYaml .Values.resources | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{.Values.image.pullPolicy}}
          ports:
            - containerPort: 8443
              name: webhook-api
          volumeMounts:
            - name: webhook-tls-certs
              mountPath: /run/secrets/tls
              readOnly: true
            - name: webhook-config
              mountPath: /config
              readOnly: true
      volumes:
        - name: webhook-tls-certs
          secret:
            secretName: webhook-server-tls
        - name: webhook-config
          projected:
            sources:
            - configMap:
                name: datree-config
                optional: true
            - configMap:
                name: webhook-scanning-filters
                optional: true
